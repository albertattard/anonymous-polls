package com.albertattard.polls.repository

import com.albertattard.polls.helpers.CreatePollHelper
import com.albertattard.polls.helpers.DatabaseHelper
import io.kotlintest.shouldBe
import io.kotlintest.specs.StringSpec
import io.micronaut.test.annotation.MicronautTest
import org.jetbrains.exposed.sql.Database

@MicronautTest
class CreatePollDatabaseServiceTest(
    private val database: Database
) : StringSpec({
    "should create the poll and return the share link generated by the greeting service" {
        val create = CreatePollHelper.sample()
        val service = PollDatabaseService(database)
        val ids = service.create(create)

        /* Verify that the poll is in the database */
        DatabaseHelper.withPoll(database, ids.readId) {
            it["readId"] shouldBe ids.readId
            it["editId"] shouldBe ids.editId
            it["deleteId"] shouldBe ids.deleteId
            it["caption"] shouldBe create.caption
        }

        create.questions.forEachIndexed { questionIndex, question ->
            val questionId = DatabaseHelper.withQuestion(database, ids.readId, questionIndex) {
                it["readId"] shouldBe ids.readId
                it["editId"] shouldBe ids.editId
                it["deleteId"] shouldBe ids.deleteId
                it["index"] shouldBe questionIndex
                it["question"] shouldBe question.text
            }

            question.possibleAnswers.forEachIndexed { answerIndex, possibleAnswer ->
                DatabaseHelper.withPossibleAnswer(database, questionId, answerIndex) {
                    it["readId"] shouldBe ids.readId
                    it["editId"] shouldBe ids.editId
                    it["deleteId"] shouldBe ids.deleteId
                    it["questionId"] shouldBe questionId
                    it["index"] shouldBe answerIndex
                    it["possibleAnswer"] shouldBe possibleAnswer.text
                }
            }
        }
    }
})
